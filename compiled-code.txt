<next-env.d.ts>
L1: /// <reference types="next" />
L2: /// <reference types="next/image-types/global" />
L3: 
L4: // NOTE: This file should not be edited
L5: // see https://nextjs.org/docs/app/building-your-application/configuring/typescript for more information.
L6: 
</next-env.d.ts>

<tailwind.config.ts>
L1: import type { Config } from "tailwindcss";
L2: 
L3: const config: Config = {
L4:     darkMode: ["class"],
L5:     content: [
L6:     "./src/pages/**/*.{js,ts,jsx,tsx,mdx}",
L7:     "./src/components/**/*.{js,ts,jsx,tsx,mdx}",
L8:     "./src/app/**/*.{js,ts,jsx,tsx,mdx}",
L9:   ],
L10:   theme: {
L11:   	extend: {
L12:   		colors: {
L13:   			background: 'hsl(var(--background))',
L14:   			foreground: 'hsl(var(--foreground))',
L15:   			card: {
L16:   				DEFAULT: 'hsl(var(--card))',
L17:   				foreground: 'hsl(var(--card-foreground))'
L18:   			},
L19:   			popover: {
L20:   				DEFAULT: 'hsl(var(--popover))',
L21:   				foreground: 'hsl(var(--popover-foreground))'
L22:   			},
L23:   			primary: {
L24:   				DEFAULT: 'hsl(var(--primary))',
L25:   				foreground: 'hsl(var(--primary-foreground))'
L26:   			},
L27:   			secondary: {
L28:   				DEFAULT: 'hsl(var(--secondary))',
L29:   				foreground: 'hsl(var(--secondary-foreground))'
L30:   			},
L31:   			muted: {
L32:   				DEFAULT: 'hsl(var(--muted))',
L33:   				foreground: 'hsl(var(--muted-foreground))'
L34:   			},
L35:   			accent: {
L36:   				DEFAULT: 'hsl(var(--accent))',
L37:   				foreground: 'hsl(var(--accent-foreground))'
L38:   			},
L39:   			destructive: {
L40:   				DEFAULT: 'hsl(var(--destructive))',
L41:   				foreground: 'hsl(var(--destructive-foreground))'
L42:   			},
L43:   			border: 'hsl(var(--border))',
L44:   			input: 'hsl(var(--input))',
L45:   			ring: 'hsl(var(--ring))',
L46:   			chart: {
L47:   				'1': 'hsl(var(--chart-1))',
L48:   				'2': 'hsl(var(--chart-2))',
L49:   				'3': 'hsl(var(--chart-3))',
L50:   				'4': 'hsl(var(--chart-4))',
L51:   				'5': 'hsl(var(--chart-5))'
L52:   			}
L53:   		},
L54:   		borderRadius: {
L55:   			lg: 'var(--radius)',
L56:   			md: 'calc(var(--radius) - 2px)',
L57:   			sm: 'calc(var(--radius) - 4px)'
L58:   		}
L59:   	}
L60:   },
L61:   plugins: [require("tailwindcss-animate")],
L62: };
L63: export default config;
L64: 
</tailwind.config.ts>

<src/app/layout.tsx>
L1: import type { Metadata } from "next";
L2: import localFont from "next/font/local";
L3: import "./globals.css";
L4: 
L5: const geistSans = localFont({
L6:   src: "./fonts/GeistVF.woff",
L7:   variable: "--font-geist-sans",
L8:   weight: "100 900",
L9: });
L10: const geistMono = localFont({
L11:   src: "./fonts/GeistMonoVF.woff",
L12:   variable: "--font-geist-mono",
L13:   weight: "100 900",
L14: });
L15: 
L16: export const metadata: Metadata = {
L17:   title: "Create Next App",
L18:   description: "Generated by create next app",
L19: };
L20: 
L21: export default function RootLayout({
L22:   children,
L23: }: Readonly<{
L24:   children: React.ReactNode;
L25: }>) {
L26:   return (
L27:     <html lang="en">
L28:       <body
L29:         className={`${geistSans.variable} ${geistMono.variable} antialiased`}
L30:       >
L31:         {children}
L32:       </body>
L33:     </html>
L34:   );
L35: }
L36: 
</src/app/layout.tsx>

<src/app/page.tsx>
L1: 
L2: "use client";
L3: 
L4: import { useState, useEffect } from 'react';
L5: import { useRouter } from 'next/navigation';
L6: import { Button } from "@/components/ui/button";
L7: import { ScrollArea } from "@/components/ui/scroll-area";
L8: import { 
L9:   Dialog,
L10:   DialogContent,
L11:   DialogHeader,
L12:   DialogTitle,
L13:   DialogDescription,
L14: } from "@/components/ui/dialog";
L15: 
L16: export default function Home() {
L17:   const router = useRouter();
L18:   const [datasets, setDatasets] = useState<string[]>([]);
L19:   const [showInstructions, setShowInstructions] = useState(true);
L20: 
L21:   useEffect(() => {
L22:     fetch('/api/datasets')
L23:       .then(res => res.json())
L24:       .then(data => setDatasets(data.datasets))
L25:       .catch(() => setDatasets([]));
L26:   }, []);
L27: 
L28:   const handleDatasetSelect = (dataset: string) => {
L29:     localStorage.setItem('selected_dataset', dataset);
L30:     router.push('/rate');
L31:   };
L32: 
L33:   return (
L34:     <div className="flex flex-col items-center justify-center min-h-screen bg-background p-4">
L35:       {/* Welcome Dialog */}
L36:       <Dialog open={showInstructions} onOpenChange={setShowInstructions}>
L37:         <DialogContent className="sm:max-w-[425px]">
L38:           <DialogHeader>
L39:             <DialogTitle>Welcome to Image Comparison</DialogTitle>
L40:             <DialogDescription className="space-y-4">
L41:               <p>Before starting, please ensure you have:</p>
L42:               <ol className="list-decimal ml-4 space-y-2">
L43:                 <li>Created a folder with your dataset name in: <br/>
L44:                     <code className="bg-muted p-1 rounded text-sm">
L45:                       /public/comparison-images/your_dataset_name/
L46:                     </code>
L47:                 </li>
L48:                 <li>Placed all your images (.png, .jpg, etc.) in this folder</li>
L49:               </ol>
L50:               <Button 
L51:                 className="w-full mt-4" 
L52:                 onClick={() => setShowInstructions(false)}
L53:               >
L54:                 I understand
L55:               </Button>
L56:             </DialogDescription>
L57:           </DialogHeader>
L58:         </DialogContent>
L59:       </Dialog>
L60: 
L61:       {/* Main Content */}
L62:       <div className="w-full max-w-md space-y-4">
L63:         <h1 className="text-2xl font-bold text-center mb-8">Select Dataset</h1>
L64:         
L65:         {datasets.length === 0 ? (
L66:           <div className="text-center space-y-4">
L67:             <p className="text-muted-foreground">No datasets found.</p>
L68:             <p className="text-sm">
L69:               Please add your images to:<br/>
L70:               <code className="bg-muted p-2 rounded block mt-2">
L71:                 /public/comparison-images/your_dataset_name/
L72:               </code>
L73:             </p>
L74:             <Button 
L75:               variant="outline" 
L76:               onClick={() => window.location.reload()}
L77:               className="mt-4"
L78:             >
L79:               Refresh
L80:             </Button>
L81:           </div>
L82:         ) : (
L83:           <ScrollArea className="h-[400px] border rounded-lg p-4">
L84:             <div className="space-y-2">
L85:               {datasets.map((dataset) => (
L86:                 <Button
L87:                   key={dataset}
L88:                   variant="outline"
L89:                   className="w-full justify-start"
L90:                   onClick={() => handleDatasetSelect(dataset)}
L91:                 >
L92:                   {dataset}
L93:                 </Button>
L94:               ))}
L95:             </div>
L96:           </ScrollArea>
L97:         )}
L98:       </div>
L99:     </div>
L100:   );
L101: }
</src/app/page.tsx>

<src/components/comparison-layout.tsx>
L1: import React from 'react';
L2: 
L3: interface ImageContainerProps {
L4:   side: 'left' | 'right';
L5:   children: React.ReactNode;
L6: }
L7: 
L8: interface ImageWrapperProps {
L9:   children: React.ReactNode;
L10: }
L11: 
L12: export const ComparisonContainer: React.FC<{ children: React.ReactNode }> = ({ children }) => (
L13:   <div className="flex flex-col h-screen bg-background">
L14:     {children}
L15:   </div>
L16: );
L17: 
L18: export const TopBar: React.FC<{ children: React.ReactNode }> = ({ children }) => (
L19:   <div className="p-4 border-b flex items-center space-x-4">
L20:     {children}
L21:   </div>
L22: );
L23: 
L24: export const MainContent: React.FC<{ children: React.ReactNode }> = ({ children }) => (
L25:   <div className="flex-1 flex overflow-hidden">
L26:     {children}
L27:   </div>
L28: );
L29: 
L30: export const ComparisonArea: React.FC<{ children: React.ReactNode }> = ({ children }) => (
L31:   <div className="flex-1 flex flex-col items-center justify-center p-4 space-y-4">
L32:     {children}
L33:   </div>
L34: );
L35: 
L36: export const ImageContainer: React.FC<ImageContainerProps> = ({ children, side }) => (
L37:   <div
L38:     className={`relative w-full h-[calc(50vh-60px)] bg-muted rounded-lg overflow-hidden grid place-items-center ${
L39:       side === 'left' ? 'mr-2' : 'ml-2'
L40:     }`}
L41:   >
L42:     {children}
L43:   </div>
L44: );
L45: 
L46: export const ImageWrapper: React.FC<ImageWrapperProps> = ({ children }) => (
L47:   <div className="w-full h-full grid place-items-center">
L48:     {children}
L49:   </div>
L50: );
L51: 
L52: export const RankingSidebar: React.FC<{ children: React.ReactNode }> = ({ children }) => (
L53:   <div className="w-64 border-l bg-muted">
L54:     {children}
L55:   </div>
L56: );
L57: 
L58: export const TieButtonContainer: React.FC<{ children: React.ReactNode }> = ({ children }) => (
L59:   <div className="flex justify-center my-2">
L60:     {children}
L61:   </div>
L62: );
</src/components/comparison-layout.tsx>

<src/scripts/image_match.ts>
L1: import * as fs from "fs";
L2: import * as path from "path";
L3: import * as crypto from "crypto";
L4: 
L5: interface ExistingComparison {
L6:   imageAId: string;
L7:   imageBId: string;
L8:   chosenImageId: string | null;
L9:   timestamp: number;
L10: }
L11: 
L12: interface Image {
L13:   id: string;
L14:   src: string;
L15:   initialRating: number;
L16:   currentRating: number;
L17:   comparisons: number;
L18:   wins: number;
L19:   losses: number;
L20:   ties: number;
L21: }
L22: 
L23: interface UserData {
L24:   user: {
L25:     id: string;
L26:     [key: string]: unknown;
L27:   };
L28:   session: {
L29:     id: string;
L30:     [key: string]: unknown;
L31:   };
L32:   comparisons: ExistingComparison[];
L33:   images: Image[]; // Added this line
L34: }
L35: 
L36: interface ImageMapping {
L37:   [id: string]: string;
L38: }
L39: 
L40: function getImageHash(filePath: string): string {
L41:   const fileBuffer = fs.readFileSync(filePath);
L42:   const hashSum = crypto.createHash("sha256");
L43:   hashSum.update(fileBuffer);
L44:   return hashSum.digest("hex");
L45: }
L46: 
L47: function decodeBase64Image(base64String: string): Buffer {
L48:   const matches = base64String.match(/^data:([A-Za-z-+\/]+);base64,(.+)$/);
L49:   if (!matches || matches.length !== 3) {
L50:     throw new Error("Invalid base64 string");
L51:   }
L52:   return Buffer.from(matches[2], "base64");
L53: }
L54: 
L55: function fuzzyMatch(hash1: string, hash2: string, threshold: number): boolean {
L56:   let differences = 0;
L57:   for (let i = 0; i < hash1.length; i++) {
L58:     if (hash1[i] !== hash2[i]) {
L59:       differences++;
L60:     }
L61:     if (differences > threshold) {
L62:       return false;
L63:     }
L64:   }
L65:   return true;
L66: }
L67: 
L68: function matchImages(
L69:   imageFolderPath: string,
L70:   jsonFilePath: string,
L71:   outputFilePath: string
L72: ): void {
L73:   // Read and parse the JSON file
L74:   const jsonData: UserData = JSON.parse(fs.readFileSync(jsonFilePath, "utf8"));
L75: 
L76:   // Get all image files from the folder
L77:   const imageFiles = fs
L78:     .readdirSync(imageFolderPath)
L79:     .filter((file) => /\.(jpg|jpeg|png|gif)$/i.test(file));
L80: 
L81:   const matchedImages: ImageMapping = {};
L82:   const unmatchedImages: string[] = [];
L83: 
L84:   // Calculate hashes for all images in the folder
L85:   const folderImageHashes = imageFiles.reduce((acc, file) => {
L86:     const filePath = path.join(imageFolderPath, file);
L87:     acc[file] = getImageHash(filePath);
L88:     return acc;
L89:   }, {} as { [filename: string]: string });
L90: 
L91:   // Match images from JSON with files in the folder
L92:   for (const image of jsonData.images) {
L93:     const base64Data = decodeBase64Image(image.src);
L94:     const jsonImageHash = crypto
L95:       .createHash("sha256")
L96:       .update(base64Data)
L97:       .digest("hex");
L98: 
L99:     let matched = false;
L100:     for (const [filename, hash] of Object.entries(folderImageHashes)) {
L101:       if (hash === jsonImageHash) {
L102:         matchedImages[image.id] = filename;
L103:         matched = true;
L104:         break;
L105:       }
L106:     }
L107: 
L108:     if (!matched) {
L109:       // Try fuzzy matching
L110:       for (const [filename, hash] of Object.entries(folderImageHashes)) {
L111:         if (fuzzyMatch(jsonImageHash, hash, 5)) {
L112:           // Allow up to 5 differences
L113:           matchedImages[image.id] = filename;
L114:           matched = true;
L115:           console.log(`Fuzzy matched: ${image.id} to ${filename}`);
L116:           break;
L117:         }
L118:       }
L119:     }
L120: 
L121:     if (!matched) {
L122:       unmatchedImages.push(image.id);
L123:     }
L124:   }
L125: 
L126:   // Write the mapping to a new JSON file
L127:   fs.writeFileSync(outputFilePath, JSON.stringify(matchedImages, null, 2));
L128: 
L129:   console.log("Matching complete. Mapping file created:", outputFilePath);
L130:   console.log("Matched images:", matchedImages);
L131:   console.log("Unmatched images:", unmatchedImages);
L132:   console.log("Number of unmatched images:", unmatchedImages.length);
L133: }
L134: 
L135: // Usage
L136: const imageFolderPath =
L137:   __dirname + "/../../public/comparison-images/diagen-process";
L138: const jsonFilePath =
L139:   __dirname +
L140:   "/../../public/comparison-images/diagen-process/existing_data.json";
L141: const outputFilePath =
L142:   __dirname + "/../../public/comparison-images/diagen-process/unscramble2.json";
L143: matchImages(imageFolderPath, jsonFilePath, outputFilePath);
L144: 
</src/scripts/image_match.ts>

<src/lib/utils.ts>
L1: import { clsx, type ClassValue } from "clsx"
L2: import { twMerge } from "tailwind-merge"
L3: 
L4: export function cn(...inputs: ClassValue[]) {
L5:   return twMerge(clsx(inputs))
L6: }
L7: 
</src/lib/utils.ts>

<src/app/datasets/route.ts>
L1: // src/app/api/datasets/route.ts
L2: import { NextResponse } from 'next/server';
L3: import { promises as fs } from 'fs';
L4: import path from 'path';
L5: 
L6: export async function GET() {
L7:   try {
L8:     const datasetsPath = path.join(process.cwd(), 'public', 'comparison-images');
L9:     try {
L10:       await fs.access(datasetsPath);
L11:     } catch {
L12:       await fs.mkdir(datasetsPath, { recursive: true });
L13:     }
L14:     
L15:     const datasets = await fs.readdir(datasetsPath);
L16:     
L17:     // Filter out any files, only return directories
L18:     const filteredDatasets = await Promise.all(
L19:       datasets.map(async (dataset) => {
L20:         const stats = await fs.stat(path.join(datasetsPath, dataset));
L21:         return stats.isDirectory() ? dataset : null;
L22:       })
L23:     );
L24: 
L25:     return NextResponse.json({
L26:       datasets: filteredDatasets.filter(Boolean)
L27:     });
L28:   } catch (error) {
L29:     console.error('Error reading datasets:', error);
L30:     return NextResponse.json({ datasets: [] });
L31:   }
L32: }
</src/app/datasets/route.ts>

<src/app/rate/page.tsx>
L1: "use client";
L2: 
L3: import { useState, useEffect, useRef, useCallback } from "react";
L4: import { useRouter } from 'next/navigation';
L5: import { motion, AnimatePresence } from "framer-motion";
L6: import Zoom from "react-medium-image-zoom";
L7: import "react-medium-image-zoom/dist/styles.css";
L8: import { Progress } from "@/components/ui/progress";
L9: import { Button } from "@/components/ui/button";
L10: import { ScrollArea } from "@/components/ui/scroll-area";
L11: import {
L12:   Dialog,
L13:   DialogContent,
L14:   DialogHeader,
L15:   DialogTitle,
L16:   DialogDescription,
L17: } from "@/components/ui/dialog";
L18: import {
L19:   Popover,
L20:   PopoverContent,
L21:   PopoverTrigger,
L22: } from "@/components/ui/popover";
L23: import { Slider } from "@/components/ui/slider";
L24: import { Label } from "@/components/ui/label";
L25: import { Ranker, RankableItem, ComparisonResult } from "eloranker";
L26: import {
L27:   ComparisonContainer,
L28:   TopBar,
L29:   MainContent,
L30:   ComparisonArea,
L31:   ImageContainer,
L32:   ImageWrapper,
L33:   RankingSidebar,
L34:   TieButtonContainer,
L35: } from "@/components/comparison-layout";
L36: 
L37: interface ImageMapping {
L38:   newFilename: string;
L39: }
L40: 
L41: type ProgressParamsState = {
L42:   ratingChangeThreshold: number;
L43:   stableComparisonsThreshold: number;
L44: }
L45: 
L46: let ranker: Ranker | null = null;
L47: 
L48: export default function PairwiseComparison() {
L49:   const router = useRouter();
L50:   const [datasetLabel, setDatasetLabel] = useState<string | null>(null);
L51:   const [currentPair, setCurrentPair] = useState<[string, string] | null>(null);
L52:   const initializing = useRef(false);
L53:   const [progress, setProgress] = useState(0);
L54:   const [comparisons, setComparisons] = useState(0);
L55:   const [totalItems, setTotalItems] = useState(0);
L56:   const [showInstructions, setShowInstructions] = useState(true);
L57:   const [progressParams, setProgressParams] = useState<ProgressParamsState>({
L58:     ratingChangeThreshold: 50,
L59:     stableComparisonsThreshold: 3,
L60:   });
L61: 
L62:   const updateProgress = useCallback(() => {
L63:     if (ranker) {
L64:       if (comparisons < totalItems) {
L65:         const nLogN = totalItems * Math.log2(totalItems);
L66:         const earlyProgress = (comparisons / nLogN) * 100;
L67:         setProgress(Math.min(earlyProgress, 100));
L68:       } else {
L69:         const currentProgress = ranker.getProgress(progressParams);
L70:         setProgress(currentProgress * 100);
L71:       }
L72:     }
L73:   }, [comparisons, totalItems, progressParams]);
L74: 
L75:   const setNextComparison = useCallback(() => {
L76:     if (ranker) {
L77:       const nextPair = ranker.getNextComparison();
L78:       setCurrentPair(nextPair);
L79:     }
L80:   }, []);
L81: 
L82:   const initializeRanker = useCallback(async () => {
L83:     if (!datasetLabel) return;
L84:     
L85:     console.log("Loading dataset ", datasetLabel);
L86: 
L87:     try {
L88:       const storedComparisons = localStorage.getItem(
L89:         `comparisons_${datasetLabel}`
L90:       );
L91:       const storedItems = localStorage.getItem(`ranker_${datasetLabel}`);
L92: 
L93:       if (storedItems && storedComparisons) {
L94:         console.log("Loading data from localStorage");
L95:         const parsedItems = JSON.parse(storedItems);
L96:         console.log("Stored items:", parsedItems);
L97:         console.log("Stored comparisons:", JSON.parse(storedComparisons));
L98: 
L99:         ranker = new Ranker(parsedItems, { kFactor: 32 });
L100:         JSON.parse(storedComparisons).forEach((comparison: ComparisonResult) => {
L101:           ranker?.addComparisonResult(comparison);
L102:         });
L103:         setComparisons(JSON.parse(storedComparisons).length);
L104:         setTotalItems(parsedItems.length);
L105:       } else {
L106:         console.log("No stored data found, initializing new ranker");
L107:         const imageMappings: ImageMapping[] = await fetch(
L108:           `/comparison-images/${datasetLabel}/image-mappings.json`
L109:         ).then((res) => res.json());
L110: 
L111:         const initialItems: RankableItem[] = imageMappings.map((mapping) => ({
L112:           id: mapping.newFilename,
L113:           initialRating: 1500,
L114:           currentRating: 1500,
L115:           wins: 0,
L116:           losses: 0,
L117:           ties: 0,
L118:           comparisons: 0,
L119:           lastComparisonTime: null,
L120:           ratingHistory: [],
L121:         }));
L122: 
L123:         console.log(
L124:           "Loaded ",
L125:           initialItems.length,
L126:           " items for dataset ",
L127:           datasetLabel
L128:         );
L129: 
L130:         ranker = new Ranker(initialItems, { kFactor: 32 });
L131:         setTotalItems(initialItems.length);
L132:       }
L133: 
L134:       updateProgress();
L135:       setNextComparison();
L136:     } catch (error) {
L137:       console.error("Error initializing ranker:", error);
L138:       alert("Error loading dataset. Please check if the dataset exists and is properly formatted.");
L139:       router.push('/');
L140:       return;
L141:     }
L142:   }, [datasetLabel, router, updateProgress, setNextComparison]);
L143: 
L144:   const handleComparison = useCallback((result: "win" | "loss" | "tie") => {
L145:     if (!ranker || !currentPair || !datasetLabel) return;
L146: 
L147:     const comparisonResult: ComparisonResult = {
L148:       itemId1: currentPair[0],
L149:       itemId2: currentPair[1],
L150:       result: result,
L151:       timestamp: Date.now(),
L152:     };
L153: 
L154:     const ratingDelta = ranker.addComparisonResult(comparisonResult);
L155:     console.log("Rating delta:", ratingDelta);
L156:     updateProgress();
L157:     setNextComparison();
L158:     setComparisons((prev) => prev + 1);
L159: 
L160:     // Persist data to localStorage
L161:     const updatedItems = ranker.getAllItems();
L162:     localStorage.setItem(
L163:       `ranker_${datasetLabel}`,
L164:       JSON.stringify(updatedItems)
L165:     );
L166: 
L167:     // Save comparison to localStorage
L168:     const storedComparisons = localStorage.getItem(
L169:       `comparisons_${datasetLabel}`
L170:     );
L171:     const comparisons = storedComparisons ? JSON.parse(storedComparisons) : [];
L172:     comparisons.push(comparisonResult);
L173:     localStorage.setItem(
L174:       `comparisons_${datasetLabel}`,
L175:       JSON.stringify(comparisons)
L176:     );
L177:   }, [currentPair, datasetLabel, setNextComparison, updateProgress]);
L178: 
L179:   const handleImageError = useCallback(() => {
L180:     alert("Error loading images. Please check if the dataset exists and contains valid images.");
L181:     router.push('/');
L182:   }, [router]);
L183: 
L184:   const downloadRankings = useCallback(() => {
L185:     if (!ranker || !datasetLabel) return;
L186: 
L187:     const rankings = ranker.getRankings().map((item, index) => ({
L188:       rank: index + 1,
L189:       id: item.id,
L190:       rating: item.currentRating,
L191:     }));
L192: 
L193:     const jsonContent = JSON.stringify(rankings, null, 2);
L194:     const blob = new Blob([jsonContent], { type: "application/json" });
L195:     const url = URL.createObjectURL(blob);
L196: 
L197:     const link = document.createElement("a");
L198:     link.href = url;
L199:     link.download = `rankings_${datasetLabel}.json`;
L200:     document.body.appendChild(link);
L201:     link.click();
L202:     document.body.removeChild(link);
L203:     URL.revokeObjectURL(url);
L204:   }, [datasetLabel]);
L205: 
L206:   const downloadWinLoss = useCallback(() => {
L207:     if (!datasetLabel) return;
L208:     
L209:     const storedComparisons = localStorage.getItem(
L210:       `comparisons_${datasetLabel}`
L211:     );
L212:     if (!storedComparisons) return;
L213: 
L214:     const comparisons = JSON.parse(storedComparisons);
L215:     const jsonContent = JSON.stringify(comparisons, null, 2);
L216:     const blob = new Blob([jsonContent], { type: "application/json" });
L217:     const url = URL.createObjectURL(blob);
L218: 
L219:     const link = document.createElement("a");
L220:     link.href = url;
L221:     link.download = `win_loss_${datasetLabel}.json`;
L222:     document.body.appendChild(link);
L223:     link.click();
L224:     document.body.removeChild(link);
L225:     URL.revokeObjectURL(url);
L226:   }, [datasetLabel]);
L227: 
L228:   // Dataset selection effect
L229:   useEffect(() => {
L230:     const selectedDataset = localStorage.getItem('selected_dataset');
L231:     if (!selectedDataset) {
L232:       router.push('/');
L233:       return;
L234:     }
L235:     setDatasetLabel(selectedDataset);
L236:   }, [router]);
L237: 
L238:   // Initialize ranker effect
L239:   useEffect(() => {
L240:     if (!initializing.current && datasetLabel) {
L241:       initializing.current = true;
L242:       initializeRanker();
L243:     }
L244:   }, [datasetLabel, initializeRanker]);
L245: 
L246:   // Keyboard controls effect
L247:   useEffect(() => {
L248:     const handleKeyPress = (e: KeyboardEvent) => {
L249:       if (!currentPair) return;
L250:       
L251:       switch(e.key) {
L252:         case 'ArrowLeft':
L253:           handleComparison('win');
L254:           break;
L255:         case 'ArrowRight':
L256:           handleComparison('loss');
L257:           break;
L258:         case 'ArrowDown':
L259:           handleComparison('tie');
L260:           break;
L261:       }
L262:     };
L263: 
L264:     window.addEventListener('keydown', handleKeyPress);
L265:     return () => window.removeEventListener('keydown', handleKeyPress);
L266:   }, [currentPair, handleComparison]);
L267: 
L268:   if (!datasetLabel) {
L269:     return <div className="flex items-center justify-center h-screen">Loading dataset...</div>;
L270:   }
L271: 
L272:   if (!ranker || !currentPair) {
L273:     return <div className="flex items-center justify-center h-screen">Initializing comparison...</div>;
L274:   }
L275: 
L276:   const leftImageUrl = `/comparison-images/${datasetLabel}/${currentPair[0]}`;
L277:   const rightImageUrl = `/comparison-images/${datasetLabel}/${currentPair[1]}`;
L278: 
L279:   return (
L280:     <ComparisonContainer>
L281:       <Dialog open={showInstructions} onOpenChange={setShowInstructions}>
L282:         <DialogContent className="sm:max-w-[425px]">
L283:           <DialogHeader>
L284:             <DialogTitle>How to Compare Images</DialogTitle>
L285:             <DialogDescription className="space-y-4">
L286:               <p>Choose the better image between each pair:</p>
L287:               <ul className="list-disc ml-4 space-y-2">
L288:                 <li>Press <kbd className="px-2 py-1 bg-muted rounded">←</kbd> or click &ldquo;Win&rdquo; under left image</li>
L289:                 <li>Press <kbd className="px-2 py-1 bg-muted rounded">→</kbd> or click &ldquo;Win&rdquo; under right image</li>
L290:                 <li>Press <kbd className="px-2 py-1 bg-muted rounded">↓</kbd> or click &ldquo;Tie&rdquo; for equal quality</li>
L291:               </ul>
L292:               <Button 
L293:                 className="w-full mt-4" 
L294:                 onClick={() => setShowInstructions(false)}
L295:               >
L296:                 Start Comparing
L297:               </Button>
L298:             </DialogDescription>
L299:           </DialogHeader>
L300:         </DialogContent>
L301:       </Dialog>
L302: 
L303:       <TopBar>
L304:         <div className="text-sm font-medium">Comparisons: {comparisons}</div>
L305:         <Popover>
L306:           <PopoverTrigger asChild>
L307:             <div className="flex-1 cursor-pointer">
L308:               <Progress value={progress} className="w-full" />
L309:             </div>
L310:           </PopoverTrigger>
L311:           <PopoverContent className="w-80">
L312:             <div className="grid gap-4">
L313:               <div className="space-y-2">
L314:                 <h4 className="font-medium leading-none">
L315:                   Adjust Progress Parameters
L316:                 </h4>
L317:                 <p className="text-sm text-muted-foreground">
L318:                   These parameters affect how progress is calculated.
L319:                 </p>
L320:               </div>
L321:               <div className="grid gap-2">
L322:                 <div className="grid grid-cols-3 items-center gap-4">
L323:                   <Label htmlFor="ratingChangeThreshold">Rating Change</Label>
L324:                   <Slider
L325:                     id="ratingChangeThreshold"
L326:                     min={10}
L327:                     max={500}
L328:                     step={1}
L329:                     value={[progressParams.ratingChangeThreshold]}
L330:                     onValueChange={([value]) =>
L331:                       setProgressParams((prev) => ({
L332:                         ...prev,
L333:                         ratingChangeThreshold: value,
L334:                       }))
L335:                     }
L336:                     className="col-span-2"
L337:                   />
L338:                 </div>
L339:                 <div className="grid grid-cols-3 items-center gap-4">
L340:                   <Label htmlFor="stableComparisonsThreshold">Stable Comparisons</Label>
L341:                   <Slider
L342:                     id="stableComparisonsThreshold"
L343:                     min={1}
L344:                     max={12}
L345:                     step={1}
L346:                     value={[progressParams.stableComparisonsThreshold]}
L347:                     onValueChange={([value]) =>
L348:                       setProgressParams((prev) => ({
L349:                         ...prev,
L350:                         stableComparisonsThreshold: value,
L351:                       }))
L352:                     }
L353:                     className="col-span-2"
L354:                   />
L355:                 </div>
L356:               </div>
L357:             </div>
L358:           </PopoverContent>
L359:         </Popover>
L360:         <Button onClick={downloadRankings}>Download Rankings</Button>
L361:         <Button onClick={downloadWinLoss}>Download Win/Loss</Button>
L362:       </TopBar>
L363: 
L364:       <MainContent>
L365:         <ComparisonArea>
L366:           <AnimatePresence mode="wait">
L367:             <motion.div
L368:               key={`left-${currentPair[0]}`}
L369:               initial={{ opacity: 0, x: -50 }}
L370:               animate={{ opacity: 1, x: 0 }}
L371:               exit={{ opacity: 0, x: 50 }}
L372:               transition={{ duration: 0.3 }}
L373:             >
L374:               <ImageContainer side="left">
L375:                 <Zoom>
L376:                   <ImageWrapper>
L377:                     <img
L378:                       src={leftImageUrl}
L379:                       alt="Left comparison image"
L380:                       className="max-w-full max-h-full w-auto h-auto object-contain cursor-zoom-in"
L381:                       onError={handleImageError}
L382:                     />
L383:                   </ImageWrapper>
L384:                 </Zoom>
L385:                 <Button
L386:                   className="absolute bottom-2 right-2 z-10"
L387:                   onClick={() => handleComparison("win")}
L388:                 >
L389:                   Win
L390:                 </Button>
L391:               </ImageContainer>
L392:             </motion.div>
L393:           </AnimatePresence>
L394: 
L395:           <TieButtonContainer>
L396:             <Button variant="outline" onClick={() => handleComparison("tie")}>
L397:               Tie
L398:             </Button>
L399:           </TieButtonContainer>
L400: 
L401:           <AnimatePresence mode="wait">
L402:             <motion.div
L403:               key={`right-${currentPair[1]}`}
L404:               initial={{ opacity: 0, x: 50 }}
L405:               animate={{ opacity: 1, x: 0 }}
L406:               exit={{ opacity: 0, x: -50 }}
L407:               transition={{ duration: 0.3 }}
L408:             >
L409:               <ImageContainer side="right">
L410:                 <Zoom>
L411:                   <ImageWrapper>
L412:                     <img
L413:                       src={rightImageUrl}
L414:                       alt="Right comparison image"
L415:                       className="max-w-full max-h-full w-auto h-auto object-contain cursor-zoom-in"
L416:                       onError={handleImageError}
L417:                     />
L418:                   </ImageWrapper>
L419:                 </Zoom>
L420:                 <Button
L421:                   className="absolute bottom-2 right-2 z-10"
L422:                   onClick={() => handleComparison("loss")}
L423:                 >
L424:                   Win
L425:                 </Button>
L426:               </ImageContainer>
L427:             </motion.div>
L428:           </AnimatePresence>
L429:         </ComparisonArea>
L430: 
L431:         <RankingSidebar>
L432:           <ScrollArea className="h-full">
L433:             <div className="p-4 space-y-4">
L434:               <h2 className="font-semibold text-lg mb-2">Rankings</h2>
L435:               {ranker.getRankings().map((item, index) => (
L436:                 <div key={item.id} className="flex items-center space-x-2">
L437:                   <div className="w-16 h-12 bg-background rounded overflow-hidden">
L438:                     <img
L439:                       src={`/comparison-images/${datasetLabel}/${item.id}`}
L440:                       alt={`Ranked image ${index + 1}`}
L441:                       className="w-full h-full object-cover"
L442:                       onError={handleImageError}
L443:                     />
L444:                   </div>
L445:                   <div>
L446:                     <div className="text-sm font-medium">
L447:                       Rank {index + 1}
L448:                     </div>
L449:                     <div className="text-xs text-muted-foreground">
L450:                       Rating: {Math.round(item.currentRating)}
L451:                     </div>
L452:                   </div>
L453:                 </div>
L454:               ))}
L455:             </div>
L456:           </ScrollArea>
L457:         </RankingSidebar>
L458:       </MainContent>
L459:     </ComparisonContainer>
L460:   );
L461: }
</src/app/rate/page.tsx>

<src/components/ui/button.tsx>
L1: import * as React from "react"
L2: import { Slot } from "@radix-ui/react-slot"
L3: import { cva, type VariantProps } from "class-variance-authority"
L4: 
L5: import { cn } from "@/lib/utils"
L6: 
L7: const buttonVariants = cva(
L8:   "inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
L9:   {
L10:     variants: {
L11:       variant: {
L12:         default:
L13:           "bg-primary text-primary-foreground shadow hover:bg-primary/90",
L14:         destructive:
L15:           "bg-destructive text-destructive-foreground shadow-sm hover:bg-destructive/90",
L16:         outline:
L17:           "border border-input bg-background shadow-sm hover:bg-accent hover:text-accent-foreground",
L18:         secondary:
L19:           "bg-secondary text-secondary-foreground shadow-sm hover:bg-secondary/80",
L20:         ghost: "hover:bg-accent hover:text-accent-foreground",
L21:         link: "text-primary underline-offset-4 hover:underline",
L22:       },
L23:       size: {
L24:         default: "h-9 px-4 py-2",
L25:         sm: "h-8 rounded-md px-3 text-xs",
L26:         lg: "h-10 rounded-md px-8",
L27:         icon: "h-9 w-9",
L28:       },
L29:     },
L30:     defaultVariants: {
L31:       variant: "default",
L32:       size: "default",
L33:     },
L34:   }
L35: )
L36: 
L37: export interface ButtonProps
L38:   extends React.ButtonHTMLAttributes<HTMLButtonElement>,
L39:     VariantProps<typeof buttonVariants> {
L40:   asChild?: boolean
L41: }
L42: 
L43: const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
L44:   ({ className, variant, size, asChild = false, ...props }, ref) => {
L45:     const Comp = asChild ? Slot : "button"
L46:     return (
L47:       <Comp
L48:         className={cn(buttonVariants({ variant, size, className }))}
L49:         ref={ref}
L50:         {...props}
L51:       />
L52:     )
L53:   }
L54: )
L55: Button.displayName = "Button"
L56: 
L57: export { Button, buttonVariants }
L58: 
</src/components/ui/button.tsx>

<src/components/ui/dialog.tsx>
L1: // src/components/ui/dialog.tsx
L2: "use client"
L3: 
L4: import * as React from "react"
L5: import * as DialogPrimitive from "@radix-ui/react-dialog"
L6: import { X } from "lucide-react"
L7: 
L8: import { cn } from "@/lib/utils"
L9: 
L10: const Dialog = DialogPrimitive.Root
L11: 
L12: const DialogTrigger = DialogPrimitive.Trigger
L13: 
L14: const DialogPortal = DialogPrimitive.Portal
L15: 
L16: const DialogClose = DialogPrimitive.Close
L17: 
L18: const DialogOverlay = React.forwardRef<
L19:   React.ElementRef<typeof DialogPrimitive.Overlay>,
L20:   React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>
L21: >(({ className, ...props }, ref) => (
L22:   <DialogPrimitive.Overlay
L23:     ref={ref}
L24:     className={cn(
L25:       "fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
L26:       className
L27:     )}
L28:     {...props}
L29:   />
L30: ))
L31: DialogOverlay.displayName = DialogPrimitive.Overlay.displayName
L32: 
L33: const DialogContent = React.forwardRef<
L34:   React.ElementRef<typeof DialogPrimitive.Content>,
L35:   React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>
L36: >(({ className, children, ...props }, ref) => (
L37:   <DialogPortal>
L38:     <DialogOverlay />
L39:     <DialogPrimitive.Content
L40:       ref={ref}
L41:       className={cn(
L42:         "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
L43:         className
L44:       )}
L45:       {...props}
L46:     >
L47:       {children}
L48:       <DialogPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground">
L49:         <X className="h-4 w-4" />
L50:         <span className="sr-only">Close</span>
L51:       </DialogPrimitive.Close>
L52:     </DialogPrimitive.Content>
L53:   </DialogPortal>
L54: ))
L55: DialogContent.displayName = DialogPrimitive.Content.displayName
L56: 
L57: const DialogHeader = ({
L58:   className,
L59:   ...props
L60: }: React.HTMLAttributes<HTMLDivElement>) => (
L61:   <div
L62:     className={cn(
L63:       "flex flex-col space-y-1.5 text-center sm:text-left",
L64:       className
L65:     )}
L66:     {...props}
L67:   />
L68: )
L69: DialogHeader.displayName = "DialogHeader"
L70: 
L71: const DialogFooter = ({
L72:   className,
L73:   ...props
L74: }: React.HTMLAttributes<HTMLDivElement>) => (
L75:   <div
L76:     className={cn(
L77:       "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
L78:       className
L79:     )}
L80:     {...props}
L81:   />
L82: )
L83: DialogFooter.displayName = "DialogFooter"
L84: 
L85: const DialogTitle = React.forwardRef<
L86:   React.ElementRef<typeof DialogPrimitive.Title>,
L87:   React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>
L88: >(({ className, ...props }, ref) => (
L89:   <DialogPrimitive.Title
L90:     ref={ref}
L91:     className={cn(
L92:       "text-lg font-semibold leading-none tracking-tight",
L93:       className
L94:     )}
L95:     {...props}
L96:   />
L97: ))
L98: DialogTitle.displayName = DialogPrimitive.Title.displayName
L99: 
L100: const DialogDescription = React.forwardRef<
L101:   React.ElementRef<typeof DialogPrimitive.Description>,
L102:   React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>
L103: >(({ className, ...props }, ref) => (
L104:   <DialogPrimitive.Description
L105:     ref={ref}
L106:     className={cn("text-sm text-muted-foreground", className)}
L107:     {...props}
L108:   />
L109: ))
L110: DialogDescription.displayName = DialogPrimitive.Description.displayName
L111: 
L112: export {
L113:   Dialog,
L114:   DialogPortal,
L115:   DialogOverlay,
L116:   DialogClose,
L117:   DialogTrigger,
L118:   DialogContent,
L119:   DialogHeader,
L120:   DialogFooter,
L121:   DialogTitle,
L122:   DialogDescription,
L123: }
</src/components/ui/dialog.tsx>

<src/components/ui/input.tsx>
L1: import * as React from "react"
L2: import { cn } from "@/lib/utils"
L3: 
L4: export interface InputProps extends React.InputHTMLAttributes<HTMLInputElement> {
L5:   wrapperClassName?: string;
L6: }
L7: 
L8: const Input = React.forwardRef<HTMLInputElement, InputProps>(
L9:   ({ className, type, ...props }, ref) => {
L10:     return (
L11:       <input
L12:         type={type}
L13:         className={cn(
L14:           "flex h-9 w-full rounded-md border border-input bg-transparent px-3 py-1 text-sm shadow-sm transition-colors file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50",
L15:           className
L16:         )}
L17:         ref={ref}
L18:         {...props}
L19:       />
L20:     )
L21:   }
L22: )
L23: Input.displayName = "Input"
L24: 
L25: export { Input }
L26: 
</src/components/ui/input.tsx>

<src/components/ui/label.tsx>
L1: "use client"
L2: 
L3: import * as React from "react"
L4: import * as LabelPrimitive from "@radix-ui/react-label"
L5: import { cva, type VariantProps } from "class-variance-authority"
L6: 
L7: import { cn } from "@/lib/utils"
L8: 
L9: const labelVariants = cva(
L10:   "text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70"
L11: )
L12: 
L13: const Label = React.forwardRef<
L14:   React.ElementRef<typeof LabelPrimitive.Root>,
L15:   React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &
L16:     VariantProps<typeof labelVariants>
L17: >(({ className, ...props }, ref) => (
L18:   <LabelPrimitive.Root
L19:     ref={ref}
L20:     className={cn(labelVariants(), className)}
L21:     {...props}
L22:   />
L23: ))
L24: Label.displayName = LabelPrimitive.Root.displayName
L25: 
L26: export { Label }
L27: 
</src/components/ui/label.tsx>

<src/components/ui/popover.tsx>
L1: "use client"
L2: 
L3: import * as React from "react"
L4: import * as PopoverPrimitive from "@radix-ui/react-popover"
L5: 
L6: import { cn } from "@/lib/utils"
L7: 
L8: const Popover = PopoverPrimitive.Root
L9: 
L10: const PopoverTrigger = PopoverPrimitive.Trigger
L11: 
L12: const PopoverAnchor = PopoverPrimitive.Anchor
L13: 
L14: const PopoverContent = React.forwardRef<
L15:   React.ElementRef<typeof PopoverPrimitive.Content>,
L16:   React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>
L17: >(({ className, align = "center", sideOffset = 4, ...props }, ref) => (
L18:   <PopoverPrimitive.Portal>
L19:     <PopoverPrimitive.Content
L20:       ref={ref}
L21:       align={align}
L22:       sideOffset={sideOffset}
L23:       className={cn(
L24:         "z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
L25:         className
L26:       )}
L27:       {...props}
L28:     />
L29:   </PopoverPrimitive.Portal>
L30: ))
L31: PopoverContent.displayName = PopoverPrimitive.Content.displayName
L32: 
L33: export { Popover, PopoverTrigger, PopoverContent, PopoverAnchor }
L34: 
</src/components/ui/popover.tsx>

<src/components/ui/progress.tsx>
L1: "use client"
L2: 
L3: import * as React from "react"
L4: import * as ProgressPrimitive from "@radix-ui/react-progress"
L5: 
L6: import { cn } from "@/lib/utils"
L7: 
L8: const Progress = React.forwardRef<
L9:   React.ElementRef<typeof ProgressPrimitive.Root>,
L10:   React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>
L11: >(({ className, value, ...props }, ref) => (
L12:   <ProgressPrimitive.Root
L13:     ref={ref}
L14:     className={cn(
L15:       "relative h-2 w-full overflow-hidden rounded-full bg-primary/20",
L16:       className
L17:     )}
L18:     {...props}
L19:   >
L20:     <ProgressPrimitive.Indicator
L21:       className="h-full w-full flex-1 bg-primary transition-all"
L22:       style={{ transform: `translateX(-${100 - (value || 0)}%)` }}
L23:     />
L24:   </ProgressPrimitive.Root>
L25: ))
L26: Progress.displayName = ProgressPrimitive.Root.displayName
L27: 
L28: export { Progress }
L29: 
</src/components/ui/progress.tsx>

<src/components/ui/scroll-area.tsx>
L1: "use client"
L2: 
L3: import * as React from "react"
L4: import * as ScrollAreaPrimitive from "@radix-ui/react-scroll-area"
L5: 
L6: import { cn } from "@/lib/utils"
L7: 
L8: const ScrollArea = React.forwardRef<
L9:   React.ElementRef<typeof ScrollAreaPrimitive.Root>,
L10:   React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>
L11: >(({ className, children, ...props }, ref) => (
L12:   <ScrollAreaPrimitive.Root
L13:     ref={ref}
L14:     className={cn("relative overflow-hidden", className)}
L15:     {...props}
L16:   >
L17:     <ScrollAreaPrimitive.Viewport className="h-full w-full rounded-[inherit]">
L18:       {children}
L19:     </ScrollAreaPrimitive.Viewport>
L20:     <ScrollBar />
L21:     <ScrollAreaPrimitive.Corner />
L22:   </ScrollAreaPrimitive.Root>
L23: ))
L24: ScrollArea.displayName = ScrollAreaPrimitive.Root.displayName
L25: 
L26: const ScrollBar = React.forwardRef<
L27:   React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,
L28:   React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>
L29: >(({ className, orientation = "vertical", ...props }, ref) => (
L30:   <ScrollAreaPrimitive.ScrollAreaScrollbar
L31:     ref={ref}
L32:     orientation={orientation}
L33:     className={cn(
L34:       "flex touch-none select-none transition-colors",
L35:       orientation === "vertical" &&
L36:         "h-full w-2.5 border-l border-l-transparent p-[1px]",
L37:       orientation === "horizontal" &&
L38:         "h-2.5 flex-col border-t border-t-transparent p-[1px]",
L39:       className
L40:     )}
L41:     {...props}
L42:   >
L43:     <ScrollAreaPrimitive.ScrollAreaThumb className="relative flex-1 rounded-full bg-border" />
L44:   </ScrollAreaPrimitive.ScrollAreaScrollbar>
L45: ))
L46: ScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName
L47: 
L48: export { ScrollArea, ScrollBar }
L49: 
</src/components/ui/scroll-area.tsx>

<src/components/ui/slider.tsx>
L1: "use client"
L2: 
L3: import * as React from "react"
L4: import * as SliderPrimitive from "@radix-ui/react-slider"
L5: 
L6: import { cn } from "@/lib/utils"
L7: 
L8: const Slider = React.forwardRef<
L9:   React.ElementRef<typeof SliderPrimitive.Root>,
L10:   React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>
L11: >(({ className, ...props }, ref) => (
L12:   <SliderPrimitive.Root
L13:     ref={ref}
L14:     className={cn(
L15:       "relative flex w-full touch-none select-none items-center",
L16:       className
L17:     )}
L18:     {...props}
L19:   >
L20:     <SliderPrimitive.Track className="relative h-1.5 w-full grow overflow-hidden rounded-full bg-primary/20">
L21:       <SliderPrimitive.Range className="absolute h-full bg-primary" />
L22:     </SliderPrimitive.Track>
L23:     <SliderPrimitive.Thumb className="block h-4 w-4 rounded-full border border-primary/50 bg-background shadow transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50" />
L24:   </SliderPrimitive.Root>
L25: ))
L26: Slider.displayName = SliderPrimitive.Root.displayName
L27: 
L28: export { Slider }
L29: 
</src/components/ui/slider.tsx>

